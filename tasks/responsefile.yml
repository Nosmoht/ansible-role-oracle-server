---
- name: Copy response file
  shell: cp {{ oracle_db_homes[item.0].unpack_directory}}/database/response/db_install.rsp {{ oracle_db_homes[item.0].response_file }}
  args:
    creates: '{{ oracle_db_homes[item.0].response_file }}'
  when: not oracle_inventory_file_check.stat.exists or item.1.stdout|int == 0
  with_together:
  - oracle_db_homes
  - oracle_existing_db_homes.results

- name: Setting parameters in response file
  lineinfile:
    dest: '{{ oracle_db_homes[item.0].response_file }}'
    regexp: ^({{ item.1.name }})=
    line: \1={{ item.1.value }}
    backrefs: true
    state: present
  with_nested:
  - oracle_db_homes
  - - name: oracle.install.option
      value: INSTALL_DB_SWONLY
    - name: UNIX_GROUP_NAME
      value: '{{ oracle_inventory_group_name }}'
    - name: INVENTORY_LOCATION
      value: '{{ oracle_inventory_directory }}'
    - name: ORACLE_BASE
      value: '{{ oracle_db_oracle_base }}'
    - name: oracle.install.db.DBA_GROUP
      value: '{{ oracle_db_osdba_group_name }}'
    - name: oracle.install.db.OPER_GROUP
      value: '{{ oracle_db_osoper_group_name }}'
    - name: oracle.install.db.BACKUPDBA_GROUP
      value: '{{ oracle_db_osbackupdba_group_name }}'
    - name: oracle.install.db.DGDBA_GROUP
      value: '{{ oracle_db_osdgdba_group_name }}'
    - name: oracle.install.db.KMDBA_GROUP
      value: '{{ oracle_db_oskmdba_group_name }}'
    - name: oracle.installer.autoupdates.option
      value: SKIP_UPDATES
    - name: DECLINE_SECURITY_UPDATES
      value: true

- name: Configure ORACLE_HOME in response file
  lineinfile:
    dest: '{{ item.value.response_file }}'
    regexp: ^(ORACLE_HOME)=
    line: \1={{ item.value.path }}
    backrefs: true
    state: present
  with_dict: oracle_db_homes

- name: Configure oracle.install.db.InstallEdition in response file
  lineinfile:
    dest: '{{ item.value.response_file }}'
    regexp: ^(oracle.install.db.InstallEdition)=
    line: \1={{ item.value.edition }}
    backrefs: true
    state: present
  with_dict: oracle_db_homes